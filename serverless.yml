service: products-categories-service

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, "dev"}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: '*'
  environment:
    PRODUCTS_TABLE: products-table-${self:provider.stage}
    CATEGORIES_TABLE: categories-table-${self:provider.stage}
    QUEUE_NAME: bought-product-queue-${self:provider.stage}
    DEAD_QUEUE_NAME: dead-bought-product-queue-${self:provider.stage}

package:
  individually: true
    
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-dynamodb-seed
  - serverless-offline

resources:
  Resources:
    BoughtProductQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.QUEUE_NAME}
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          deadLetterTargetArn:
            !GetAtt 'DeadBoughtProduct.Arn'

    DeadBoughtProduct:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.DEAD_QUEUE_NAME}
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue

    SqsBoughtProductPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: BoughtProductQueue
        PolicyDocument:
          Version: "2021-04-19"
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource:
                !GetAtt 'BoughtProductQueue.Arn'
              Condition:
                ArnEquals:
                  'aws:SourceArn': arn:aws:sns:eu-west-1:501082649462:ProductBought.fifo

    ProductBoughtTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          !GetAtt 'BoughtProductQueue.Arn'
        Protocol: "sqs"
        TopicArn: arn:aws:sns:eu-west-1:501082649462:ProductBought.fifo

    ProductsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CategoriesTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId: 
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt 'CognitoUserPool.Arn'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    migration:
      dir: ./offline
